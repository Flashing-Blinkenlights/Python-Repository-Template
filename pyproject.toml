[build-system]
requires = ["setuptools>=39.2.0"]
build-backend = "setuptools.build_meta"


[tool.pytest.ini_options]
pythonpath = [
  "src"
]
testpaths = [
    "tests",
]


[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true
plugins = "numpy.typing.mypy_plugin"


[tool.pylint.main]
# Specify a score threshold to be exceeded before program exits with error.
fail-under = 9.5

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 0

# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100

suggestion-mode = true


[tool.pylint.basic]
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty", "property"]

good-names-rgxs = "[a-z]"

[tool.pylint.exceptions]
overgeneral-exceptions = ["BaseException", "Exception"]


[tool.pylint.format]
max-line-length = 80


[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "new"


[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "NOTE", "TODO"]